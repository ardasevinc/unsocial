// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [citext]
}

model Simulation {
  id  Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  simulation_start DateTime
  simulation_end DateTime
  chaos Int
  simulation_status SimulationStatus @default(CREATED)
  events SimulationEvent[]
  @@map("simulations")
}

enum SimulationStatus {
  CREATED
  RUNNING
  PAUSED
  FINISHED
  @@map("simulation_status")
}

model SimulationEvent {
  id  Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  name String
  type EventType
  time DateTime
  global_importance_score Int
  local_importance_score Int
  simulation_id Int
  simulation Simulation @relation(fields: [simulation_id], references: [id])
  location_id Int
  location EventLocation @relation(fields: [location_id], references: [id])
  @@map("simulation_events")
}

enum EventType {
  POLITICAL
  ECONOMIC
  SOCIAL
  TECHNOLOGICAL
  ENVIRONMENTAL
  ENTERTAINMENT
  LEGAL
  GLOBAL
  @@map("event_type")
}

model EventLocation {
  id Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  name String @db.Citext
  country String
  city String
  latitude Float
  longitude Float
  events SimulationEvent[]
  @@map("event_locations")
}

model Agent {
  id Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  display_name String @db.Citext
  username String @db.Citext @unique
  prompt String
  engagement_probability Float
  followed_by Agent[] @relation("AgentFollows")
  following Agent[] @relation("AgentFollows")
  posts Post[]
  replies Reply[]
  likes Like[]
  @@map("agents")
}

model Post {
  id BigInt @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  content String
  comments Reply[]
  likes Like[]
  is_repost Boolean
  repost_count Int @default(0)
  poster_id Int
  poster Agent @relation(fields: [poster_id], references: [id])
  @@map("posts")
}

model Reply {
  id BigInt @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  content String
  likes Like[]
  repost_count Int
  post_id BigInt
  post Post @relation(fields: [post_id], references: [id])
  author_id Int
  author Agent @relation(fields: [author_id], references: [id])
  @@map("replies")
}

model Like {
  id BigInt @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  post_id BigInt
  post Post @relation(fields: [post_id], references: [id])
  liker_id Int
  liker Agent @relation(fields: [liker_id], references: [id])
  to_reply_id BigInt
  to_reply Reply @relation(fields: [to_reply_id], references: [id])
  @@map("likes")
}

model User {
  id String @id
  created DateTime @default(now())
  updated DateTime @updatedAt
  sessions Session[]
  @@map("users")
}

model Session {
  id String @id
  userId String
  expires_at DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}
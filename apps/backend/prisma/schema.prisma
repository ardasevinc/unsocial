// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator prismabox {
  provider  = "prismabox"
  // you can optionally specify the output location. Defaults to ./prismabox
  output    = "../src/lib/db-types"
  // optionally enable the data model generation. See the data model section below for more info
  inputModel = true
  nullableName = "Nullable"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model Simulation {
  id               Int               @id @default(autoincrement())
  created          DateTime          @default(now())
  updated          DateTime          @updatedAt
  end              DateTime          @map("simulation_end")
  currentTime      DateTime          @map("current_time")
  chaos            Int
  simulationStatus SimulationStatus  @default(CREATED) @map("simulation_status")
  generations      Generation[]
  agents           Agent[]
  posts            Post[]
  events           SimulationEvent[]

  @@map("simulations")
}

enum SimulationStatus {
  CREATED
  QUEUED
  RUNNING
  PAUSED
  FINISHED

  @@map("simulation_status")
}

model SimulationEvent {
  id                    Int        @id @default(autoincrement())
  created               DateTime   @default(now())
  updated               DateTime   @updatedAt
  name                  String
  type                  EventType
  time                  DateTime
  importanceScore       Int        @map("importance_score")
  simulationId          Int        @map("simulation_id")
  simulation            Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)
  locationId            Int?       @map("location_id")
  location              Location?  @relation(fields: [locationId], references: [id])

  @@map("simulation_events")
}

enum EventType {
  POLITICAL
  ECONOMIC
  SOCIAL
  TECHNOLOGICAL
  ENVIRONMENTAL
  ENTERTAINMENT
  LEGAL
  GLOBAL
  SPORTS
  SCIENCE

  @@map("event_type")
}

model Location {
  id      Int               @id @default(autoincrement())
  created DateTime          @default(now())
  updated DateTime          @updatedAt
  name    String            @db.Citext
  country String?           @db.Citext
  city    String?           @db.Citext
  events  SimulationEvent[]
  agents  Agent[]

  @@map("event_locations")
}

model Agent {
  id                    Int           @id @default(autoincrement())
  created               DateTime      @default(now())
  updated               DateTime      @updatedAt
  type                  AgentType
  displayName           String        @map("display_name") @db.Citext
  username              String        @unique @db.Citext
  timezone              String
  prompt                String?
  engagementProbability Float?        @map("engagement_probability")
  simulationId          Int           @map("simulation_id")
  simulation            Simulation    @relation(fields: [simulationId], references: [id])
  posts                 Post[]
  replies               Reply[]
  likes                 Like[]
  account               HumanAccount?
  locationId            Int?          @map("location_id")
  location              Location?     @relation(fields: [locationId], references: [id])

  @@map("agents")
}

enum AgentType {
  AI
  HUMAN

  @@map("agent_type")
}

model Post {
  id          BigInt      @id @default(autoincrement())
  created     DateTime    @default(now())
  updated     DateTime    @updatedAt
  content     String
  comments    Reply[]
  likes       Like[]
  isRepost    Boolean?    @map("is_repost")
  repostCount Int?        @default(0) @map("repost_count")
  ownerId     Int         @map("owner_id")
  owner       Agent       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  generation  Generation?
  simulationId Int        @map("simulation_id")
  simulation   Simulation @relation(fields: [simulationId], references: [id])

  @@map("posts")
}

model Reply {
  id          BigInt      @id @default(autoincrement())
  created     DateTime    @default(now())
  updated     DateTime    @updatedAt
  content     String
  likes       Like[]
  repostCount Int         @default(0) @map("repost_count")
  postId      BigInt      @map("post_id")
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId    Int         @map("author_id")
  author      Agent       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  generation  Generation?

  @@map("replies")
}

model Like {
  id      BigInt   @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  postId  BigInt   @map("post_id")
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  agentId Int      @map("agent_id")
  agent   Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  replyId BigInt   @map("reply_id")
  reply   Reply    @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Generation {
  id      String    @id
  created DateTime
  model   String
  usage   LLMUsage?
  simulationId Int @map("simulation_id")
  simulation Simulation @relation(fields: [simulationId], references: [id])
  post    Post?     @relation(fields: [postId], references: [id])
  postId  BigInt?   @unique @map("post_id")
  reply   Reply     @relation(fields: [replyId], references: [id])
  replyId BigInt    @unique @map("reply_id")
}

model LLMUsage {
  id               BigInt     @id @default(autoincrement())
  completionTokens Int        @map("completion_tokens")
  promptTokens     Int        @map("prompt_tokens")
  totalTokens      Int        @map("total_tokens")
  totalCost        Decimal    @map("total_cost") @db.Money
  generation       Generation @relation(fields: [generationId], references: [id])
  generationId     String     @unique @map("generation_id")
}

model HumanAccount {
  id       String    @id
  created  DateTime  @default(now())
  updated  DateTime  @updatedAt
  sessions Session[]
  agentId  Int       @unique @map("agent_id")
  agent    Agent     @relation(fields: [agentId], references: [id])

  @@map("human_accounts")
}

model Session {
  id        String       @id
  accountId String
  expiresAt DateTime     @map("expires_at")
  account   HumanAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [citext]
}

model Simulation {
  id  Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  simulationStart DateTime @map("simulation_start")
  simulationEnd DateTime @map("simulation_end")
  chaos Int
  simulationStatus SimulationStatus @default(CREATED) @map("simulation_status")
  events SimulationEvent[]
  @@map("simulations")
}

enum SimulationStatus {
  CREATED
  QUEUED
  RUNNING
  PAUSED
  FINISHED
  @@map("simulation_status")
}

model SimulationEvent {
  id  Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  name String
  type EventType
  time DateTime
  globalImportanceScore Int @map("global_importance_score")
  localImportanceScore Int @map("local_importance_score")
  simulationId Int @map("simulation_id")
  simulation Simulation @relation(fields: [simulationId], references: [id])
  locationId Int @map("location_id")
  location EventLocation @relation(fields: [locationId], references: [id])
  @@map("simulation_events")
}

enum EventType {
  POLITICAL
  ECONOMIC
  SOCIAL
  TECHNOLOGICAL
  ENVIRONMENTAL
  ENTERTAINMENT
  LEGAL
  GLOBAL
  @@map("event_type")
}

model EventLocation {
  id Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  name String @db.Citext
  country String
  city String
  latitude Float
  longitude Float
  events SimulationEvent[]
  @@map("event_locations")
}

model Agent {
  id Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  displayName String @db.Citext @map("display_name")
  username String @db.Citext @unique
  prompt String
  engagementProbability Float @map("engagement_probability")
  followedBy Agent[] @relation("AgentFollows")
  following Agent[] @relation("AgentFollows")
  posts Post[]
  replies Reply[]
  likes Like[]
  @@map("agents")
}

model Post {
  id BigInt @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  content String
  comments Reply[]
  likes Like[]
  isRepost Boolean @map("is_repost")
  repostCount Int @default(0) @map("repost_count")
  posterId Int @map("poster_id")
  poster Agent @relation(fields: [posterId], references: [id])
  @@map("posts")
}

model Reply {
  id BigInt @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  content String
  likes Like[]
  repostCount Int @default(0) @map("repost_count")
  postId BigInt @map("post_id")
  post Post @relation(fields: [postId], references: [id])
  authorId Int @map("author_id")
  author Agent @relation(fields: [authorId], references: [id])
  @@map("replies")
}

model Like {
  id BigInt @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  post_id BigInt
  post Post @relation(fields: [post_id], references: [id])
  likerId Int @map("liker_id")
  liker Agent @relation(fields: [likerId], references: [id])
  toReplyId BigInt @map("to_reply_id")
  to_reply Reply @relation(fields: [toReplyId], references: [id])
  @@map("likes")
}

model User {
  id String @id
  created DateTime @default(now())
  updated DateTime @updatedAt
  sessions Session[]
  @@map("users")
}

model Session {
  id String @id
  userId String
  expiresAt DateTime @map("expires_at")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}